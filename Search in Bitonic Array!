/*
Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:

A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.


Problem Constraints
3 <= N <= 105

1 <= A[i], B <= 108

Given array always contain a bitonic point.

Array A always contain distinct elements.



Input Format
First argument is an integer array A denoting the bitonic sequence.

Second argument is an integer B.



Output Format
Return a single integer denoting the position (0 index based) of the element B in the array A if B doesn't exist in A return -1.



Example Input
Input 1:

 A = [3, 9, 10, 20, 17, 5, 1]
 B = 20
Input 2:

 A = [5, 6, 7, 8, 9, 10, 3, 2, 1]
 B = 30


Example Output
Output 1:

 3
Output 2:

 -1


Example Explanation
Explanation 1:

 B = 20 present in A at index 3
Explanation 2:

 B = 30 is not present in A
*/

//CODE


 
 
 int search_element(vector<int> &arr,int l,int u,int target,bool check)
 {
     while(l<=u)
     {
         int mid=l +(u-l)/2;
         if(arr[mid] == target)
         {
             return mid;
         }
         if(check)
         {
             if(target < arr[mid])
             {
                 u=mid-1;
             }
             else
             {
                 l=mid+1;
             }
         }
         else{
             
             if(target < arr[mid])
             {
                 l=mid+1;
             }
             else
             {
                 u=mid-1;
             }
         }
     }
     return -1;
 }
int binary_search(vector<int> &arr,int l,int u,int target)
{
    int a,b;
    while(l<=u)
    {
        int mid=l +(u-l)/2;
         if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1])
         {
             a= search_element(arr,0,mid-1,target,true);
             b= search_element(arr,mid,u,target,false);
             if (a != -1 || b != -1) {
                return (a != -1) ? a : b;
            } else {
                return -1; // Target not found
            }
         }
         else if(arr[mid ] > arr[mid-1] && arr[mid] < arr[mid+1])
         {
             l=mid+1;
         }
         else{
             u=mid-1;
         }
    }    
  
  
}
int Solution::solve(vector<int> &A, int B)  {
   int n1=A.size();
   return binary_search(A,0,n1-1,B);
}


